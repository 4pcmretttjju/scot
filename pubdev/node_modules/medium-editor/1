diff --git a/spec/content.spec.js b/spec/content.spec.js
index fdc24b2..9002bf8 100644
--- a/spec/content.spec.js
+++ b/spec/content.spec.js
@@ -120,36 +120,56 @@ describe('Content TestCase', function () {
 
             expect(evt.preventDefault).toHaveBeenCalled();
         });
+    });
 
-        it('should allow one space at the end of a line when disableExtraSpaces options is true', function () {
+    describe('when the enter key is pressed', function () {
+        it('should not do anything when singleEnterBlockElement options is true', function () {
             this.el.innerHTML = '<p>lorem ipsum</p>';
 
-            var editor = this.newMediumEditor('.editor', { disableExtraSpaces: true }),
+            var editor = this.newMediumEditor('.editor', { singleEnterBlockElement: true }),
                 evt;
 
-            placeCursorInsideElement(editor.elements[0].getElementsByTagName('p')[0], 1);
+            placeCursorInsideElement(editor.elements[0], 1);
 
             evt = prepareEvent(editor.elements[0], 'keydown', {
-                keyCode: MediumEditor.util.keyCode.SPACE
+                keyCode: MediumEditor.util.keyCode.ENTER
             });
 
             spyOn(evt, 'preventDefault').and.callThrough();
 
             firePreparedEvent(evt, editor.elements[0], 'keydown');
-
             expect(evt.preventDefault).not.toHaveBeenCalled();
         });
 
-        it('should prevent more spaces from being inserted at the end of a line when disableExtraSpaces options is true', function () {
-            this.el.innerHTML = '<p>lorem ipsum    <br /></p>';
+        it('should add a br tag when enter is pressed once and singleEnterBlockElement options is false', function () {
+            this.el.innerHTML = '<p>lorem ipsum</p>';
 
-            var editor = this.newMediumEditor('.editor', { disableExtraSpaces: true }),
+            var editor = this.newMediumEditor('.editor', { singleEnterBlockElement: false }),
                 evt;
 
-            placeCursorInsideElement(editor.elements[0].getElementsByTagName('p')[0], 1);
+            placeCursorInsideElement(editor.elements[0], 1);
 
             evt = prepareEvent(editor.elements[0], 'keydown', {
-                keyCode: MediumEditor.util.keyCode.SPACE
+                keyCode: MediumEditor.util.keyCode.ENTER
+            });
+
+            spyOn(evt, 'preventDefault').and.callThrough();
+
+            firePreparedEvent(evt, editor.elements[0], 'keydown');
+            expect(evt.preventDefault).toHaveBeenCalled();
+            expect(this.el.innerHTML).toBe('<p>lorem ipsum<br></p>');
+        });
+
+        it('should add a p tag when enter is pressed twice and singleEnterBlockElement options is false', function () {
+            this.el.innerHTML = '<p>lorem ipsum</p>';
+
+            var editor = this.newMediumEditor('.editor', { singleEnterBlockElement: false }),
+                evt;
+
+            placeCursorInsideElement(editor.elements[0], 1);
+
+            evt = prepareEvent(editor.elements[0], 'keydown', {
+                keyCode: MediumEditor.util.keyCode.ENTER
             });
 
             spyOn(evt, 'preventDefault').and.callThrough();
@@ -157,10 +177,16 @@ describe('Content TestCase', function () {
             firePreparedEvent(evt, editor.elements[0], 'keydown');
 
             expect(evt.preventDefault).toHaveBeenCalled();
+            expect(this.el.innerHTML).toBe('<p>lorem ipsum<br></p>');
+
+            //placing cursor and firing second enter
+            //it should remove the br tag added by first enter and add a new p tag
+            placeCursorInsideElement(editor.elements[0], 1);
+            firePreparedEvent(evt, editor.elements[0], 'keydown');
+            expect(evt.preventDefault).toHaveBeenCalled();
+            expect(this.el.innerHTML).toBe('<p>lorem ipsum</p><p></p>');
         });
-    });
 
-    describe('when the enter key is pressed', function () {
         it('should prevent new lines from being inserted when disableReturn options is true', function () {
             this.el.innerHTML = 'lorem ipsum';
 
@@ -513,32 +539,6 @@ describe('Content TestCase', function () {
         expect(this.el.innerHTML).toMatch(/(<p><br><\/p>)?/);
     });
 
-    describe('when pressing backspace key on blockquote element', function () {
-        it('should remove the blockquote tag and replace it with p tag when cursor is at the start of the blockquote content', function () {
-            this.el.innerHTML = '<blockquote>lorem ipsum</blockquote>';
-            var editor = this.newMediumEditor('.editor'),
-                target = editor.elements[0].querySelector('blockquote');
-
-            placeCursorInsideElement(target, 0);
-            fireEvent(target, 'keydown', {
-                keyCode: MediumEditor.util.keyCode.BACKSPACE
-            });
-            expect(this.el.innerHTML).toBe('<p>lorem ipsum</p>');
-        });
-
-        it('should not change any formatting when cursor is not at the start of the blockquote content', function () {
-            this.el.innerHTML = '<blockquote>lorem ipsum</blockquote>';
-            var editor = this.newMediumEditor('.editor'),
-                target = editor.elements[0].querySelector('blockquote');
-
-            placeCursorInsideElement(target, 1);
-            fireEvent(target, 'keydown', {
-                keyCode: MediumEditor.util.keyCode.BACKSPACE
-            });
-            expect(this.el.innerHTML).toBe('<blockquote>lorem ipsum</blockquote>');
-        });
-    });
-
     describe('when deleting an empty first list item via backspace', function () {
         it('should insert a paragraph before the list if it is the first element in the editor', function () {
             this.el.innerHTML = '<ul><li></li><li>lorem ipsum</li></ul>';
