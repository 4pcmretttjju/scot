var { sort, filter } = require('./utils');

var containsIgnoreCase = function(a, b) {
  a = (a + '').toLowerCase().trim();
  b = (b + '').toLowerCase().trim();
  return b.indexOf(a) >= 0;
};

function buildInitialState(props) {
       var dataSource;
        props = props || this.props;

        if (!arguments.length) {
	    console.log("My Lord")
            dataSource = props.initialData;
        }

        var dataSourceQuery = {};

        if (typeof dataSource == 'function') {
	    console.log("Jesus")
            dataSource = dataSource(dataSourceQuery, props);
        }

        if (typeof dataSource == 'string') {
            var fetch = this.props.fetch || global.fetch;

            var keys = Object.keys(dataSourceQuery);
            if (props.appendDataSourceQueryParams && keys.length) {
                //dataSource was initially passed as a string
                //so we append quey params
                dataSource += '?' + keys.map(function (param) {
                    return param + '=' + JSON.stringify(dataSourceQuery[param]);
                }).join('&');
            }

            dataSource = fetch(dataSource);
        }

        if (dataSource && dataSource.then) {

            if (props.onDataSourceResponse) {
                dataSource.then(props.onDataSourceResponse, props.onDataSourceResponse);
            } else {
                this.setState({
                    defaultLoading: true
                });
                var noCatchFn = dataSource['catch'] ? null : errorFn;

                dataSource = dataSource.then(function (response) {
                    return response && typeof response.json == 'function' ? response.json() : response;
                }).then((function (json) {

                    if (props.onDataSourceSuccess) {
                        props.onDataSourceSuccess(json);
                        this.setState({
                            defaultLoading: false
                        });
                        return;
                    }

                    var info;
                    if (typeof props.getDataSourceInfo == 'function') {
                        info = props.getDataSourceInfo(json);
                    }
		    
                    var data = info ? info.data : Array.isArray(json) ? json : json.data;
		    
                    var count = info ? info.count : json.count != null ? json.count : null;

		    var columns = info? info.columns: Array.isArray(json) ? json: json.columns;
		    

		    if(columns == null)
		    {
			columns = []
		    }
		    else{
			check = props.setColumns
		    }
                    var newState = {
                        defaultData: data,
                        defaultLoading: false,
			newcolumns: columns
                    };
                    if (props.groupBy) {
                        newState.groupData = group(data, props.groupBy);
                        delete this.groupedRows;
                    }

                    if (count != null) {
			newState.columns = props.columns
                        newState.defaultDataSourceCount = count;
                    }
                    this.setState(newState);
                }).bind(this), noCatchFn);

                if (dataSource['catch']) {
                    dataSource['catch'](errorFn);
                }
            }

            if (props.onDataSourceLoaded) {
                dataSource.then(props.onDataSourceLoaded);
            }
        }

  return {
    // Clone the initialData.
    data: data.slice(0),
    sortBy: props.initialSortBy,
    filterValues: {},
    currentPage: 0,
    pageLength: props.initialPageLength,
  };
}

module.exports = {

  getInitialState() {
    return buildInitialState(this.props);
  },

  getDefaultProps() {
    return {
      initialPageLength: 10,
      pageLengthOptions: [ 5, 10, 20 ],
      filters: {
        globalSearch: {
          filter: containsIgnoreCase,
        },
      },
    };
  },

  componentWillReceiveProps(nextProps) {
    this.setState(buildInitialState(nextProps));
  },

  componentWillMount() {
    // Do the initial sorting if specified.
    var {sortBy, data} = this.state;
    if (sortBy) {
      this.setState({ data: sort(sortBy, data) });
    }
  },

  onSort(sortBy) {
    this.setState({
      sortBy: sortBy,
      data: sort(sortBy, this.state.data),
    });
  },

  onFilter(filterName, filterValue) {
    var {filterValues, sortBy} = this.state;
    var {initialData, filters} = this.props;

    filterValues[filterName] = filterValue;
    var newData = filter(filters, filterValues, initialData);
    newData = sort(sortBy, newData);

    this.setState({
      data: newData,
      filterValues: filterValues,
      currentPage: 0,
    });
  },

  // Pagination
  buildPage() {
    var {data, currentPage, pageLength} = this.state;
    var start = pageLength * currentPage;

    return {
      data: data.slice(start, start + pageLength),
      currentPage: currentPage,
      totalPages: Math.ceil(data.length / pageLength),
    };
  },

  onChangePage(pageNumber) {
    this.setState({ currentPage: pageNumber });
  },

  onPageLengthChange(value) {
    var newPageLength = +value;
    var {currentPage, pageLength} = this.state;
    var newPage = Math.floor((currentPage * pageLength) / newPageLength);

    this.setState({
      pageLength: newPageLength,
      currentPage: newPage,
    });
  },

};
